[
  {
    "Likelihood Of Attack": "Low",
    "condition": "target.isSQL is True and target.hasWriteAccess is True and (target.controls.sanitizesInput is False or target.controls.validatesInput is False or target.controls.implementsPOLP is False or target.controls.usesParameterizedInput is False)",
    "description": "Object Relational Mapping Injection",
    "details": "An attacker leverages a weakness present in the database access layer code generated with an Object Relational Mapping (ORM) tool or a weakness in the way that a developer used a persistence framework to inject their own SQL commands to be executed against the underlying database. The attack here is similar to plain SQL injection, except that the application does not use JDBC to directly talk to the database, but instead it uses a data access layer generated by an ORM tool or framework (e.g. Hibernate). While most of the time code generated by an ORM tool contains safe access methods that are immune to SQL injection, sometimes either due to some weakness in the generated code or due to the fact that the developer failed to use the generated access methods properly, SQL injection is still possible.",
    "example": "An attacker uses a web application that uses an ORM tool for database access. The attacker inputs a specially crafted string in a form field that gets processed by the ORM tool in a way that alters the SQL query executed against the database. This results in unauthorized access to sensitive data or even allows arbitrary command execution on the database.",
    "mitigations": "Remember to understand how to use the data access methods generated by the ORM tool / framework properly in a way that would leverage the built-in security mechanisms of the framework. Ensure to keep up to date with security relevant updates to the persistence framework used within your application.",
    "prerequisites": "An application uses data access layer generated by an ORM tool or framework. An application uses user supplied data in queries executed against the database. The separation between data plane and control plane is not ensured, through either developer error or an underlying weakness in the data access layer code generation framework.",
    "references": "https://capec.mitre.org/data/definitions/109.html, http://cwe.mitre.org/data/definitions/20.html, http://cwe.mitre.org/data/definitions/89.html, http://cwe.mitre.org/data/definitions/564.html",
    "severity": "High",
    "target": [
      "Datastore"
    ],
    "SID": "TEST"
  }
]
